import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';
import 'package:myplug_ca/core/constants/users.dart';
import 'package:myplug_ca/features/user/data/datasources/firebase_auth_service.dart';
import 'package:myplug_ca/features/user/domain/models/myplug_user.dart';

class MockFirebaseAuth extends Mock implements FirebaseAuth {}

class MockUserCredential extends Mock implements UserCredential {}

void main() {
  late MockFirebaseAuth mockFirebaseAuth;
  late MockUserCredential mockUserCredential;
  late FirebaseAuthService firebaseAuthService;
  late MyplugUser? myplugUser;
  late MyplugUser? expectedUser;

  setUp(() {
    mockFirebaseAuth = MockFirebaseAuth();
    mockUserCredential = MockUserCredential();
    firebaseAuthService = FirebaseAuthService(mockFirebaseAuth);
    myplugUser = demoUsers[0];
  });

  test('test user login', () async {
    //ARRANGE
    when(mockFirebaseAuth.signInWithEmailAndPassword(
            email: 'smoq@gmail.com', password: '12345'))
        .thenAnswer((_) async => mockUserCredential);

    //ACT
    expectedUser = await firebaseAuthService.signIn(
        email: 'smoq@gmail.com', password: '12345');

    //ASSERT
    expect(expectedUser, myplugUser);
  });
}
